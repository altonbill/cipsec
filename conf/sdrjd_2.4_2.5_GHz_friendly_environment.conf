; Default configuration file
; You can define your own SDRJD configuration and invoke it by doing
; ./sdrjd --config_file=my_SDRJD_configuration.conf
;

[SDRJD]

;######### GLOBAL OPTIONS ##################
;#internal_fs_hz: Internal signal sampling frequency after the signal conditioning stage [Hz].
SDRJD.internal_fs_hz=5000000

;#enable_sweep: If is set to true enables the frequency sweep
SDRJD.enable_sweep=true

;#start_freq_hz: Initial frequency of the frequency sweep. Only avaliable if enable_sweep is set to true
SDRJD.start_freq_hz=2400.0e6

;#stop_freq_hz: Final frequency of the frequency sweep. Only avaliable if enable_sweep is set to true
SDRJD.stop_freq_hz=2500.0e6


;######### SIGNAL_SOURCE CONFIG ############
;#implementation: Use [File_Signal_Source] or [UHD_Signal_Source] or [Osmosdr_Signal_Source]
SignalSource.implementation=Osmosdr_Signal_Source
;SignalSource.implementation=File_Signal_Source

;#AGC_enabled: Enables the Automatic Gain Control. Set to false for the Osmosdr_Signal_Source
SignalSource.AGC_enabled=false

;#filename: path to file with the captured signal samples to be processed
SignalSource.filename=/mnt/2ECAAB1ACAAADCF9/captured_data/cw_10db_5Msps.dat
;SignalSource.filename=/mnt/2ECAAB1ACAAADCF9/captured_data/clean_wifi_ch1_5Msps.dat

;#enable_throttle_control: Only available for file signal sources. If true, emulates the sample delay based on
;#                         the configured sampling frequency. Useful to recreate the captured signal duration.
SignalSource.enable_throttle_control=false

;#item_type: Type and resolution for each of the signal samples. Use only gr_complex in this version.
SignalSource.item_type=gr_complex

;#sampling_frequency: Original Signal sampling frequency in [Hz] 
SignalSource.sampling_frequency=5000000

;#freq: RF front-end center frequency in [Hz]
SignalSource.freq_hz=2.412e9

;#bandwidth: RF front-end bandwidth in [Hz]
SignalSource.bandwidth=4.0e6

;#run_continuous: set to true for continuos operation (override the number of seconds) 
SDRJD.run_continuous=true

;#processing_delay_us: set the required amount of us that all the algorithms take to process a batch of samples. Required in slow machines to avoid overflows
SDRJD.processing_delay_us=100000

;#num_seconds: number of seconds of signal to be processed in a batch (keep this parameter low in slow machines!)
SignalSource.num_seconds=2

;#gain: Front-end Gain in [dB] 
SignalSource.rf_gain=0
SignalSource.if_gain=20
SignalSource.bb_gain=20

;#subdevice: UHD subdevice specification (for USRP1 use A:0 or B:0)
SignalSource.subdevice=A:0

;#samples: Only for File_Signal_Source. Number of samples to be processed. Notice that 0 indicates the entire file.
SignalSource.samples=0

;#repeat: Repeat the processing file.
SignalSource.repeat=false

;#dump: Dump the Signal source data to a file.
SignalSource.dump=false

;#dump_filename: Filename for dumped data. Only avaliable if dump is set to true.
SignalSource.dump_filename=../data/signal_source.dat

;######### SIGNAL_CONDITIONER CONFIG ############
;## It holds blocks to change data type, filter and resample input data. 

;#implementation: Use [Pass_Through] or [Signal_Conditioner]
;#[Pass_Through] disables this block and the [DataTypeAdapter], [InputFilter] and [Resampler] blocks
;#[Signal_Conditioner] enables this block. Then you have to configure [DataTypeAdapter], [InputFilter] and [Resampler] blocks
SignalConditioner.implementation=Pass_Through

;######### DATA_TYPE_ADAPTER CONFIG ############
;## Changes the type of input data. Please disable it in this version.
;#implementation: Use [Ishort_To_Complex] or [Pass_Through]
DataTypeAdapter.implementation=Pass_Through

;######### INPUT_FILTER CONFIG ############
;## Filter the input data. Can be combined with frequency translation for IF signals

;#implementation: Use [Pass_Through] or [Fir_Filter] or [Freq_Xlating_Fir_Filter]
;#[Pass_Through] disables this block
;#[Fir_Filter] enables a FIR Filter
;#[Freq_Xlating_Fir_Filter] enables FIR filter and a composite frequency translation that shifts IF down to zero Hz.
InputFilter.implementation=Pass_Through

;######### RESAMPLER CONFIG ############
;#[Pass_Through] disables this block
Resampler.implementation=Pass_Through

;######### JAMMER DETECTOR CONFIG ######

;#implementation: Use [Pulsed_Jammer_Detector] for JammerDetector1
;#                    [WB_Jammer_Detector] for JammerDetector2
;#                    [CW_Jammer_Detector] for JammerDetector3
;#                    [FM_Jammer_Detector] for JammerDetector4
JammerDetector1.implementation=Pulsed_Jammer_Detector

;#Threshold: Set the threshod for the decision algorithm
JammerDetector1.Threshold=1500

;#block_length: Number of samples to be processed in every iteration of the algorithm
JammerDetector1.block_length=500

;#fft_samples: Number of samples to make FFT in the spectogram of the Pulsed_Jammer_Detector algorithm
;#             Only avaliable in [Pulsed_Jammer_Detector] and [LFM_Jammer_Detector]
JammerDetector1.fft_samples=8

;#noise_estimations: Number of iterations for the initial Noise Power estimation. 
;#                   Not avaliable in [CW_Jammer_Detector]
JammerDetector1.noise_estimations=10000

;#dump: Dumps intermediate data of the algorithm to a file. Not avaliable in this version
JammerDetector1.dump=false

;#dump_filename: Filename for dumped data. Only avaliable if dump is set to true. Not avaliable in this version
JammerDetector1.dump_filename=/Path_to_sdrjd/sdrjd/install/data/pulsed_detector.dat

;#A: Value of A parameter of Tong detection algorithm
JammerDetector1.A=25

;#B: Value of B parameter of Tong detection algorithm
JammerDetector1.B=5

;#max_dwells: Maximum number of iterations for the modified Tong detection algorithm
JammerDetector1.max_dwells=30

JammerDetector2.implementation=WB_Jammer_Detector
JammerDetector2.Threshold=2.5
JammerDetector2.block_length=5000
JammerDetector2.noise_estimations=1000
JammerDetector2.dump=false
JammerDetector2.dump_filename=/Path_to_sdrjd/sdrjd/install/data/wb_detector.dat
JammerDetector2.A=40
JammerDetector2.B=4
JammerDetector2.max_dwells=37

JammerDetector3.implementation=CW_Jammer_Detector
JammerDetector3.Threshold=800
JammerDetector3.block_length=5000
JammerDetector3.dump=false
JammerDetector3.dump_filename=/Path_to_sdrjd/sdrjd/install/data/cw_detector.dat
JammerDetector3.A=10
JammerDetector3.B=4
JammerDetector3.max_dwells=25

JammerDetector4.implementation=LFM_Jammer_Detector
JammerDetector4.Threshold=0.9
JammerDetector4.block_length=500
JammerDetector4.fft_samples=8
JammerDetector4.noise_estimations=10000
JammerDetector4.dump=false
JammerDetector4.dump_filename=/Path_to_sdrjd/sdrjd/install/data/lfm_detector.dat
JammerDetector4.A=8
JammerDetector4.B=4
JammerDetector4.max_dwells=10
